#!/bin/bash

# These environment variables will be loaded:
#   ARCH build_native JDK deploy TRAVIS_PULL_REQUEST

set -e

to_arch() {
  sed -e 's/^[Ii][3-6]86$/i386/;s/^[Xx]86$/i386/;s/^[Xx]\(86[-_]\)\{0,1\}64$/x86_64/;s/^[Aa][Mm][Dd]64$$/x86_64/'
}

OS="`uname -s`"
HOST_ARCH="`uname -m | to_arch`"

PKG_UPDATE=()
PKG_ADD=()
PKG_QUERY_INSTALLED=()
maven_extra_config=()
build_x86_on_x64=false

if [[ -z "$ARCH" ]]; then
  ARCH="${HOST_ARCH}"
else
  ARCH=`printf '%s\n' "$ARCH" | to_arch`
  if [[ "$ARCH" == i386 ]] && [[ "$HOST_ARCH" == x86_64 ]]; then
    build_x86_on_x64=true
  fi
fi

native=false
packages=()

add_native() {
  native=true
  packages=(cmake libtool texinfo)
  maven_extra_config+=('-Pnative')
}

if [[ -n "$build_native" ]]; then
  add_native
fi

guess_os_group() {
  if command -v apt-get >/dev/null 2>&1; then os_group=debian
  elif command -v yum >/dev/null 2>&1; then os_group=centos
  else
    echo 'Package manager not found' >&2
    exit 1
  fi
}

debian_pkg_manager() {
  PKG_UPDATE=(sudo apt-get update -y)
  PKG_QUERY_INSTALLED=(dkpg -l)
  # -f fix-broken attempt to correct a system with broken dependencies in place
  PKG_ADD=(sudo apt-get -f -y install)
}

debian_cxx_dep() {
  packages+=(automake gcc g++)
  if "$build_x86_on_x64"; then packages+=(g++-multilib); fi
}

centos_pkg_manager() {
  # -y assume yes
  PKG_ADD=(sudo yum install -y)
  PKG_QUERY_INSTALLED=(yum list installed)
}

centos_cxx_dep() {
  packages+=(automake gcc gcc-c++)
  if "$build_x86_on_x64"; then
    packages+=(glibc-devel.i686 libgcc.i686 libstdc++-devel.i686 ncurses-devel.i686)
  fi
}

oraclejdk8() {
  case "$ARCH" in
    i386) JDK_ARCH=i586;;
    x86_64) JDK_ARCH=x64;;
    *) JDK_ARCH="$ARCH";;
  esac
  JDK_DOWNLOAD_URL="https://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-${JDK_ARCH}.tar.gz"
  export JAVA_HOME="`pwd`/jdk1.8.0_131"
}

debian_openjdk8() {
  local JDK_ARCH="$ARCH"
  if [[ "$ARCH" == x86_64 ]]; then JDK_ARCH="amd64"; fi
  JDK_INSTALL_NAME="openjdk-8-jdk:${JDK_ARCH}"
  export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-${JDK_ARCH}"
}

centos_openjdk8() {
  local JDK_ARCH="$ARCH"
  if [[ "$ARCH" == i386 ]]; then JDK_ARCH="i686"; fi
  JDK_INSTALL_NAME="java-1.8.0-openjdk-devel.${JDK_ARCH}"
  export JAVA_HOME=`ls /usr/lib/jvm/java-1.8.0-openjdk-1.8*."${ARCH}" -rd1 | head -1`
}

os_fix=

darwin_fix() {
  echo 'cd /usr/local/lib && ln -s ../../lib/libSystem.B.dylib libgcc_s.10.4.dylib && ln -s ../../lib/libSystem.B.dylib libgcc_s.10.5.dylib' | bash || true
}

linux_fix() {
  echo 'cd /usr/lib/gcc/x86_64-*/4.8* && cp -n crtbeginT.o crtbeginT.orig.o && cp -f crtbeginS.o crtbeginT.o' | sudo bash || true
  echo 'cd /usr/lib/gcc/x86_64-*/5 && cp -n crtbeginT.o crtbeginT.orig.o && cp -f crtbeginS.o crtbeginT.o' | sudo bash || true
}

windows=false

case "${OS}" in
  CYGWIN*|MINGW*|MSYS*)
    PKG_ADD=(echo)
    windows=true
    ;;
  Linux)
    guess_os_group
    "${os_group}_pkg_manager"
    if "$native"; then "${os_group}_cxx_dep"; fi
    case "$JDK" in
      oraclejdk8) oraclejdk8;;
      openjdk8)
        "${os_group}_openjdk8"
        packages+=("$JDK_INSTALL_NAME")
        ;;
      *)
        # use default jdk
        ;;
    esac
    os_fix=linux_fix
    ;;
  Darwin)
    pkg_query() {
        brew list | grep -q "^$1$"
    }
    PKG_ADD=(brew install)
    PKG_QUERY_INSTALLED=(pkg_query)
    if "$native"; then packages+=(automake coreutils gnu-sed make); fi
    os_fix=darwin_fix
    ;;
  FreeBSD)
    PKG_ADD=(sudo pkg install -fy)
    PKG_QUERY_INSTALLED=(pkg info)
    if "$native"; then packages+=(automake gmake); fi
    packages+=(openjdk8)
    ;;
  OpenBSD)
    pkg_query() {
        pkg_info | grep -qF "$1"
    }
    PKG_ADD=(sudo pkg_add -I)
    #PKG_QUERY_INSTALLED=(pkg_query)
    export AUTOCONF_VERSION=2.69
    export AUTOMAKE_VERSION=1.16
    export JAVA_HOME="/usr/local/jdk-1.8.0"
    if "$native"; then packages+=(automake%$AUTOMAKE_VERSION gcc gmake); fi
    packages+=(jdk%1.8)
    ;;
  *)
    echo 'Platform not support' >&2
    exit 1
    ;;
esac

install=(install)

if [[ "$deploy" == true ]] &&  git config --get remote.origin.url 2>&1 | grep -F https://github.com/java-native-call/jnc.git -q && [[ "$TRAVIS_PULL_REQUEST" == "false" ]]; then
  install=(deploy -s .travis/settings.xml)
fi

fetch() {
  git fetch
}

reset() {
  git fetch
  rm -rf *
  git reset --hard origin/master
}

dependency() {
  if [[ -n "${JDK_DOWNLOAD_URL}" ]]; then
    wget -O- --no-cookies -c --header "Cookie: oraclelicense=a" "${JDK_DOWNLOAD_URL}" | tar -zxf-
  fi
  if [[ "${#packages[@]}" -gt 0 ]]; then
    if [[ "${#PKG_QUERY_INSTALLED[@]}" -gt 0 ]]; then
      local n_packages=()
      local pkg
      for pkg in "${packages[@]}"; do
        if ! "${PKG_QUERY_INSTALLED[@]}" "$pkg" 2>/dev/null; then
          n_packages+=("$pkg")
        fi
      done
      packages=("${n_packages[@]}")
      unset n_packages
    fi
    if [[ "${#packages[@]}" -gt 0 ]]; then
      echo "Prepare install ${packages[@]}"
      "${PKG_UPDATE[@]}" || true
      "${PKG_ADD[@]}" "${packages[@]}" || true
    fi
  fi
}

maven_prepare() {
  echo "JAVA_HOME: ${JAVA_HOME}"
  if ! "$windows"; then chmod +x mvnw; fi
}

usage() {
  echo "usage: env [ENV DEFINITION] `dirname "$0"`/`basename "$0"` actions [...extraMavenParam]"
  echo ""
  echo "Possible environment variables:"
  indent="    "
  echo "${indent}ARCH=x86_64|i386"
  echo "${indent}build_native=1"
  echo "${indent}JDK=oraclejdk8|openjdk8"
  echo "${indent}deploy=true"
  echo "${indent}TRAVIS_PULL_REQUEST=false"
  echo ""
  echo "Possible actions:"
  echo "${indent}fix: fix compile error on current OS"
  echo "${indent}fetch: execute git fetch"
  echo "${indent}reset: fetch from git repository and hard reset"
  echo "${indent}dependency: install dependencies"
  echo "${indent}test: alias for \`./mvnw test\` with configuration defined in previous environment"
  echo "${indent}package: alias for \`./mvnw package\` with configuration defined in previous environment"
  echo "${indent}install: alias for \`./mvnw install\` with configuration defined in previous environment"
}

fix_os=false
git_fetch=false
git_reset=false
install_dependency=false
maven_test=false
maven_package=false
maven_install=false
original_maven_params=()

if [[ "$#" -gt 0 ]]; then
  index=0
  for i in "$@"; do
    index=$((index+1))
    case "$i" in
      fix|os_fix|osfix|os-fix) fix_os=true;;
      fetch) git_fetch=true;;
      reset) git_reset=true;;
      test) maven_test=true;;
      dependency) install_dependency=true;;
      package) maven_package=true;;
      install) maven_install=true;;
      *)
        original_maven_params+=(${@:${index}})
        break;;
    esac
  done

  if "$fix_os" && [[ -n "$os_fix" ]]; then "$os_fix"; fi
  if "$git_reset"; then reset; elif "$git_fetch"; then fetch; fi
  if "$install_dependency"; then dependency; fi

  maven_actions=()
  if "$maven_install"; then maven_actions=(${install[@]})
  elif "$maven_package"; then maven_actions=(package)
  elif "$maven_test"; then maven_actions=(test); fi
  maven_actions+=(${original_maven_params[@]})
  if [[ "${#maven_actions[@]}" -gt 0 ]]; then
    maven_prepare
    echo ./mvnw "${maven_extra_config[@]}" "${maven_actions[@]}"
    ./mvnw "${maven_extra_config[@]}" "${maven_actions[@]}"
  fi
else
  usage
fi
